}
plot(c(3:100),y,
xlab="Sample Size",
ylab="Standard Deviation",
main="Standard Deviation of Sample Mean vs Sample Size")
curve(5/sqrt(x), from=3, to=100, col="red", add=TRUE)
plot(c(3:100),sd_sample_mean(x,10,5),
xlab="Sample Size",
ylab="Standard Deviation",
main="Standard Deviation of Sample Mean vs Sample Size")
x <- c(3:100)
plot(x, sd_sample_mean(x,10,5),
xlab="Sample Size",
ylab="Standard Deviation",
main="Standard Deviation of Sample Mean vs Sample Size")
x
len(x)
length(x)
sd_sample_mean(x,10,5)
plot(x, sd_sample_mean(c(3:100),10,5),
xlab="Sample Size",
ylab="Standard Deviation",
main="Standard Deviation of Sample Mean vs Sample Size")
x <- NULL
y <- NULL
for (i in 3:100) {
x <- c(x, i)
y <- c(y, sd_sample_mean(i,10,5) )
}
plot(x,y,
xlab="Sample Size",
ylab="Standard Deviation",
main="Standard Deviation of Sample Mean vs Sample Size")
curve(5/sqrt(x), from=3, to=100, col="red", add=TRUE)
x <- NULL
y <- NULL
for (i in 3:100) {
x <- c(x, i)
y <- c(y, sd_sample_mean(i,10,5) )
}
plot(x,y,
xlab="Sample Size",
ylab="Standard Deviation",
main="Standard Deviation of Sample Mean vs Sample Size")
curve(5/sqrt(x), from=3, to=100, col="red", add=TRUE)
?curve
library(xtable)
install.packages("xtable")
library(xtable)
a <- sample(x = c(1,2,3), size = 1000, replace = T)
b <- sample(x = c('a', 'b', 'c'), size = 1000, replace = T)
df <- data.frame(vertical_title = a, horitzontal_title = b)
df <- as.data.frame.matrix(table(df))
print(xtable(df,
align = "|l|rrr|",
caption = "Test"),
caption.placement = 'top',
comment = F,
scalebox=1,
include.rownames = T,
hline.after = c(-1,0,nrow(df)),
vline.after = c(1),
format.args=list(big.mark = ",", decimal.mark = "."))
library(xtable)
a <- sample(x = c(1,2,3), size = 1000, replace = T)
b <- sample(x = c('a', 'b', 'c'), size = 1000, replace = T)
df <- data.frame(vertical_title = a, horitzontal_title = b)
df <- as.data.frame.matrix(table(df))
print(xtable(df,
align = "|l|rrr|",
caption = "Test"),
caption.placement = 'top',
comment = F,
scalebox=1,
include.rownames = T,
hline.after = c(-1,0,nrow(df)),
vline.after = c(1),
format.args=list(big.mark = ",", decimal.mark = "."))
contingency_table <- data.frame(mutant=c(40,42), normal=c(47,107), row.names=c("died", "survived"))
contingency_table
rowSums(contingency_table)
colSums(contingency_table)
contingency_table$total <- rowSums(contingency_table)
colSums(contingency_table)
contingency_table <- data.frame(mutant=c(40,42), normal=c(47,107), row.names=c("died", "survived"))
contingency_table <- cbind(contingency_table, rowSums(contingency_table))
contingency_table <- rbind(contingency_table, colSums(contingency_table))
contingency_table
contingency_table <- data.frame(mutant=c(40,42), normal=c(47,107), row.names=c("died", "survived"))
contingency_table <- cbind(contingency_table, total=rowSums(contingency_table))
contingency_table <- rbind(contingency_table, total=colSums(contingency_table))
contingency_table
expected_table <- contingency_table
expected_table[1, 1:2]
expected_table[1:2, 1:2]
expected_table[1, 1:2]
expected_table[1, -1]
expected_table[1, 1:2]
expected_table[1, 1:2] <-
contingency_table["total", ]
contingency_table["total", ]
contingency_table["total", 1:2]
expected_table[1, -3]
contingency_table["total", -3]
expected_table[1, -3]
expected_table[1, -3]
contingency_table["total", "total"]
contingency_table["died", "total"]
contingency_table["died", "total"] / contingency_table["total", "total"]
contingency_table["total", -3]
contingency_table["died", "total"] / contingency_table["total", "total"]
contingency_table["total", -3]
contingency_table["total", -3] * contingency_table["died", "total"] / contingency_table["total", "total"]
expected_table <- contingency_table
for (i in 1:2) {
for (j in 1:2) {
expected_table[i,j] <- contingency_table[i, "total"] * contingency_table["total", j] / contingency_table["total", "total"]
}
}
expected_table
?chisq.test
chisq.test(contingency_table[1:2, "mutant"], contingency_table[1:2, "normal"])
chisq.test(contingency_table[1:2, 1:2])
X <- 0.0
for (i in 1:2) {
for (j in 1:2) {
n <- ( contingency_table[i,j] - expected_table[i,j] )^2 / expected_table[i,j]
X <- X + n
}
}
X
chisq.test(contingency_table[1:2, 1:2], correct=FALSE)
chisq.test(contingency_table[1:2, 1:2])
correct=FALSE
correct=FALSE
chisq.test(contingency_table[1:2, 1:2], correct=FALSE)
chisq.test(contingency_table[1:2, 1:2], correct=FALSE)
qchisq(0.95,1)
qchisq(0.95,1)
chisq.test(contingency_table[1:2, 1:2])
, correct=FALSE
chisq.test(contingency_table[1:2, 1:2], correct=FALSE)
contingency_table[1:2,1:2] - expected_table[1:2,1:2] )^2 / expected_table[1:2]
(contingency_table[1:2,1:2] - expected_table[1:2,1:2] )^2 / expected_table[1:2]
(contingency_table[1:2,1:2] - expected_table[1:2,1:2] )^2 / expected_table[1:2,1:2]
sum((contingency_table[1:2,1:2] - expected_table[1:2,1:2] )^2 / expected_table[1:2,1:2])
contingency_table[1:2,1:2]
contingency_table[-3,-3]
sum((contingency_table[-3,-3] - expected_table[-3,-3] )^2 / expected_table[-3,-3])
chisq.test(contingency_table[-3, -3], correct=FALSE)
numerator <- (contingency_table["survived", "mutant"] / contingency_table["total", "mutant"]) /
(contingency_table["died", "mutant"] / contingency_table["total", "mutant"])
denominator <- (contingency_table["survived", "normal"] / contingency_table["total", "normal"]) /
(contingency_table["died", "normal"] / contingency_table["total", "normal"])
numerator/denominator
numerator <- contingency_table["survived", "mutant"] / contingency_table["total", "mutant"]
denominator <- contingency_table["survived", "normal"] / contingency_table["total", "normal"]
numerator/denominator
wildtype <- c(560, 968, 3297, 1200, 858, 646, 992, 2507, 2037, 546, 2929, 1171, 1389, 1958, 3149, 1165, 2257, 2120, 65, 1571)
knockout <- c(589, 232, 983, 2597, 827, 1363, 634, 12, 643, 1889, 2840, 1291, 939, 811, 3290, 525, 90, 543, 2400, 3012)
?wilcoxon.test
?wilcox.test
wilcox.test(wildtype, knockout)
wilcox.test(wildtype, knockout, paired=TRUE)
wilcox.test(wildtype, knockout, paired=TRUE)
wilcox.test(wildtype, knockout, paired=TRUE)
wilcox.test(wildtype, knockout, paired=TRUE)
wilcox.test(wildtype, knockout)
wilcox.test(wildtype, knockout)
wilcox.test(wildtype, knockout)
wilcox.test(wildtype, knockout, paired=TRUE)
wilcox.test(wildtype, knockout)
confidence_level=0.95
(1-confidence_level)/2.0
(1+confidence_level)/2.0)
(1+confidence_level)/2.0
halpha <- (1-confidence_level)/2
halpha
(1 - halpha)
bootstrap_ci <- function(sample_data, confidence_level=0.95) {
sample_medians <- NULL
halpha <- (1-confidence_level)/2
for (i in 1:10000) {
x <- sample(sample_data, replace=TRUE)
sample_medians <- c(sample_medians, median(x))
}
sprintf("%04.1f% confidence interval for the median: between %06.3f and %06.3f",
100*confidence_level, quantile(sample_medians, halpha), quantile(sample_medians, (1 - halpha) ) )
}
bootstrap_ci(wildtype)
bootstrap_ci <- function(sample_data, confidence_level=0.95) {
sample_medians <- NULL
halpha <- (1-confidence_level)/2
for (i in 1:10000) {
x <- sample(sample_data, replace=TRUE)
sample_medians <- c(sample_medians, median(x))
}
sprintf("%04.1f % confidence interval for the median: between %06.3f and %06.3f",
100*confidence_level, quantile(sample_medians, halpha), quantile(sample_medians, (1 - halpha) ) )
}
bootstrap_ci(wildtype)
bootstrap_ci <- function(sample_data, confidence_level=0.95) {
sample_medians <- NULL
halpha <- (1-confidence_level)/2
for (i in 1:10000) {
x <- sample(sample_data, replace=TRUE)
sample_medians <- c(sample_medians, median(x))
}
sprintf("%04.1f\% confidence interval for the median: between %06.3f and %06.3f",
bootstrap_ci <- function(sample_data, confidence_level=0.95) {
sample_medians <- NULL
halpha <- (1-confidence_level)/2
for (i in 1:10000) {
x <- sample(sample_data, replace=TRUE)
sample_medians <- c(sample_medians, median(x))
}
sprintf("%04.1f%% confidence interval for the median: between %06.3f and %06.3f",
100*confidence_level, quantile(sample_medians, halpha), quantile(sample_medians, (1 - halpha) ) )
}
bootstrap_ci(wildtype)
bootstrap_ci(knockout)
bootstrap_ci <- function(sample_data, confidence_level=0.95) {
sample_medians <- NULL
halpha <- (1-confidence_level)/2
for (i in 1:10000) {
x <- sample(sample_data, replace=TRUE)
sample_medians <- c(sample_medians, median(x))
}
sprintf("%04.0f%% confidence interval for the median: between %06.3f and %06.3f",
100*confidence_level, quantile(sample_medians, halpha), quantile(sample_medians, (1 - halpha) ) )
}
bootstrap_ci(wildtype)
bootstrap_ci <- function(sample_data, confidence_level=0.95) {
sample_medians <- NULL
halpha <- (1-confidence_level)/2
for (i in 1:10000) {
x <- sample(sample_data, replace=TRUE)
sample_medians <- c(sample_medians, median(x))
}
sprintf("%2f%% confidence interval for the median: between %06.3f and %06.3f",
100*confidence_level, quantile(sample_medians, halpha), quantile(sample_medians, (1 - halpha) ) )
}
bootstrap_ci(wildtype)
bootstrap_ci <- function(sample_data, confidence_level=0.95) {
sample_medians <- NULL
halpha <- (1-confidence_level)/2
for (i in 1:10000) {
x <- sample(sample_data, replace=TRUE)
sample_medians <- c(sample_medians, median(x))
}
sprintf("%2.0f%% confidence interval for the median: between %06.3f and %06.3f",
100*confidence_level, quantile(sample_medians, halpha), quantile(sample_medians, (1 - halpha) ) )
}
bootstrap_ci(wildtype)
bootstrap_ci <- function(sample_data, confidence_level=0.95) {
sample_medians <- NULL
halpha <- (1-confidence_level)/2
for (i in 1:10000) {
x <- sample(sample_data, replace=TRUE)
sample_medians <- c(sample_medians, median(x))
}
sprintf("%2.0f%% confidence interval for the median: between %02.2f and %02.2f",
100*confidence_level, quantile(sample_medians, halpha), quantile(sample_medians, (1 - halpha) ) )
}
bootstrap_ci(wildtype)
bootstrap_ci(knockout)
library(boot)
?boot.ci
?boot
boot_out <- boot(wildtype, median, 10000)
boot_out <- boot(data=wildtype, statistic=median, R=5)
boot_out <- boot(data=wildtype, statistic=function(x,i) median(x[i]), R=5)
boot_out <- boot(data=wildtype, statistic=function(x,i) median(x[i]), R=10000)
boot.ci(boot_out)
boot_out <- boot(data=wildtype, statistic=function(x,i) median(x[i]), R=10000)
boot.ci(boot_out)
?boot.ci
boot.ci(boot_out, type="BCa")
boot.ci(boot_out, type=c("BCa"))
boot_out <- boot(data=wildtype, statistic=function(x,i) median(x[i]), R=10000)
boot.ci(boot_out, type=c("BCa"))
boot.ci(boot_out, type="bca")
library(boot)
boot_out <- boot(data=wildtype, statistic=function(x,i) median(x[i]), R=10000)
boot.ci(boot_out, type="bca")
boot_out <- boot(data=knockout, statistic=function(x,i) median(x[i]), R=10000)
boot.ci(boot_out, type="bca")
confidence_level <- 0.95
halpha <- (1-confidence_level)/2
delta <- NULL
for (i in 1:10000) {
boot_wildtype <- sample(wildtype, replace=TRUE)
boot_knockout <- sample(knockout, replace=TRUE)
delta <- c(delta, median(boot_wildtype) - median(boot_knockout) )
}
sprintf("%2.0f%% confidence interval for the difference in medians: between %02.2f and %02.2f",
100*confidence_level, quantile(delta, halpha), quantile(delta, (1 - halpha) ) )
enzyme <- c(0.114, 0.510, 0.722, 1.276, 1.928, 2.150, 2.238, 2.732, 2.758, 3.015,
3.616, 3.951, 4.281, 5.315, 6.693, 6.964, 7.056, 8.162, 8.216, 8.410)
metabolite <-c(32.4, 33.1, 36.5, 37.6, 47.6, 47.3, 50.7, 57.1, 56.6, 62.4, 69.6,
75.7, 80.0, 93.4, 108.2, 109.2, 111.8, 109.2, 110.9, 110.5)
?spearman
??spearman
?cor.test
cor.test(enzyme, metabolite, method="spearman")
cor.test(enzyme, metabolite, method="spearman", conf.level=0.95)
plot(enzyme, metabolite)
model <- lm(metabolite~enzyme)
plot(model)
plot(enzyme, metabolite)
model <- lm(metabolite~enzyme)
abline(model)
model <- lm(metabolite~enzyme)
plot(enzyme, metabolite)
abline(model)
model <- lm(metabolite~enzyme)
plot(enzyme, metabolite)
abline(model, col="red")
plot(enzyme,residuals(model))
summary(model)
plot(enzyme, log(metabolite))
plot(enzyme, exp(metabolite))
plot(log(enzyme), metabolite)
plot(exp(enzyme), metabolite)
plot(enzyme, metabolite)
enzyme_sq <- enzyme^2
model2 <- lm(metabolite~enzyme+enzyme_sq)
plot(enzyme, metabolite)
abline(model2, col="red")
enzyme_sq <- enzyme^2
model2 <- lm(metabolite~enzyme+enzyme_sq)
plot(enzyme, metabolite)
abline(model2, col="red")
enzyme_sq <- enzyme^2
model2 <- lm(metabolite~enzyme+enzyme_sq)
plot(enzyme, metabolite)
lines(enzyme, fitted(model2), col='red')
anova(model2)
summary(model2)
anova(model2)
enzyme_sq <- enzyme^2
model2 <- lm(metabolite~enzyme_sq+enzyme)
plot(enzyme, metabolite)
lines(enzyme, fitted(model2), col='red')
anova(model2)
enzyme_sq <- enzyme^2
model2 <- lm(metabolite~enzyme+enzyme_sq)
plot(enzyme, metabolite)
lines(enzyme, fitted(model2), col='red')
anova(model2)
enzyme_sq <- enzyme^2
enzyme_cu <- enzyme^3
model3 <- lm(metabolite~enzyme+enzyme_sq+enzyme_cu)
plot(enzyme, metabolite)
lines(enzyme, fitted(model3), col='red')
anova(model3)
```{r}
enzyme_sq <- enzyme^2
enzyme_cu <- enzyme^3
enzyme_qu <- enzyme^4
model4 <- lm(metabolite~enzyme+enzyme_sq+enzyme_cu+enzyme_qu)
plot(enzyme, metabolite)
lines(enzyme, fitted(model4), col='red')
anova(model4)
plot(enzyme,residuals(model3))
plot(enzyme,residuals(model3))
anova(model4, model3)
anova(model4, model3, model2)
anova(model4)
anova(model)
enzyme_sq <- enzyme^2
enzyme_cu <- enzyme^3
enzyme_qu <- enzyme^4
model <- lm(metabolite~enzyme)
model2 <- lm(metabolite~enzyme+enzyme_sq)
model3 <- lm(metabolite~enzyme+enzyme_sq+enzyme_cu)
model4 <- lm(metabolite~enzyme+enzyme_sq+enzyme_cu+enzyme_qu)
plot(enzyme, metabolite)
lines(enzyme, fitted(model), col='yellow')
lines(enzyme, fitted(model2), col='green')
lines(enzyme, fitted(model3), col='red')
lines(enzyme, fitted(model4), col='blue')
enzyme_sq <- enzyme^2
enzyme_cu <- enzyme^3
enzyme_qu <- enzyme^4
model <- lm(metabolite~enzyme)
model2 <- lm(metabolite~enzyme+enzyme_sq)
model3 <- lm(metabolite~enzyme+enzyme_sq+enzyme_cu)
model4 <- lm(metabolite~enzyme+enzyme_sq+enzyme_cu+enzyme_qu)
plot(enzyme, metabolite)
lines(enzyme, fitted(model), col='yellow')
lines(enzyme, fitted(model2), col='green')
lines(enzyme, fitted(model3), col='blue')
lines(enzyme, fitted(model4), col='red')
```{r}
plot(enzyme, metabolite)
lines(enzyme, fitted(model4), col='red')
plot(enzyme, metabolite)
lines(enzyme, fitted(model3), col='red')
model <- lm(metabolite~enzyme)
anova(model)
enzyme_sq <- enzyme^2
model2 <- lm(metabolite~enzyme+enzyme_sq)
anova(model2)
enzyme_cu <- enzyme^3
model3 <- lm(metabolite~enzyme+enzyme_sq+enzyme_cu)
anova(model3)
enzyme_qu <- enzyme^4
model4 <- lm(metabolite~enzyme+enzyme_sq+enzyme_cu+enzyme_qu)
anova(model4)
enzyme_qu <- enzyme^5
model5 <- lm(metabolite~enzyme+enzyme_sq+enzyme_cu+enzyme_qu)
anova(model5)
enzyme_qu <- enzyme^4
model4 <- lm(metabolite~enzyme+enzyme_sq+enzyme_cu+enzyme_qu)
anova(model4)
enzyme_qt <- enzyme^5
model5 <- lm(metabolite~enzyme+enzyme_sq+enzyme_cu+enzyme_qu+enzyme_qt)
anova(model5)
plot(enzyme, metabolite)
lines(enzyme, fitted(model3), col='red')
plot(enzyme,residuals(model3))
summary(model3)
model5 <- lm(metabolite~enzyme_sq+enzyme_cu)
anova(model5)
summary(model5)
model5 <- lm(metabolite~enzyme_cu+enzyme_sq+enzyme)
anova(model5)
anova(model5, model3)
anova(model3, model5)
anova(model5, model3)
model5 <- lm(metabolite~enzyme_cu+enzyme_sq)
anova(model5)
anova(model5, model3)
anova(model5, model4)
anova(model5, model3)
plot(enzyme,residuals(model5))
plot(enzyme,residuals(model3))
plot(enzyme, metabolite)
lines(enzyme, fitted(model5), col='red')
plot(enzyme, metabolite)
lines(enzyme, fitted(model3), col='red')
lines(enzyme, fitted(model5), col='blue')
summary(model3)
model5 <- lm(metabolite~enzyme_cu+enzyme_sq)
summary(model5)
anova(model5, model3)
library(circlize)
install.packages("circlize")
library(circlize)
mat<-matrix(c(1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4),nrow=4,ncol=85,byrow=TRUE)
colnames(mat)<-c('Afrikaans','Catalan','Danish','Dutch','French','Galician','Italian','Norwegian',
'Portuguese','Romanian','Spanish','Swedish','German','Indonesian','Javanese',
'Jumieka','Malay','Swahili','Albanian','Amharic','Armenian','Azerbaijani','Belarusian',
'Bengali','Bosnian','Bulgarian','Burmese','Cebuano','Croatian','Czech','Dzongkha','Estonian','Finnish',
'Georgian','Greek','Gujarati','Hebrew','Hindi','Hungarian','Icelandic','Ilocano','Irish','Kannada','Kazakh',
'Kurdish','Kyrgyz','Khmer','Lao','Latvian','Lithuanian','Macedonian','Marathi','Mongolian','Nepali','Pashto','Persian(Dari-Farsi-Tajik)',
'Polish','Punjabi','Russian','Serbian','Sinhalese','Slovak','Slovenian','Somali','Tagalog','Tamil','Tanchangya','Telugu','Tetum','Thai','Turkish',
'Turkmen','Ukrainian','Urdu','Uzbek','Vietnamese','Xhosa','Zulu','Arabic','Cantonese','Japanese','Korean','Mandarin','Taiwanese','Wu')
rownames(mat)<-c('575-600 hours','750-900 hours','1100 hours','2200 hours+')
matp2<-prop.table(mat,margin=2)
##plot chord diagram
chordDiagram(matp2,annotationTrack="grid",preAllocateTracks=list(track.height = 0.3))
##change axis
circos.trackPlotRegion(track.index=1, panel.fun=function(x,y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name=get.cell.meta.data("sector.index")
circos.text(mean(xlim), ylim[1], sector.name,facing="clockwise",
niceFacing=TRUE,adj=c(0,0.5))},bg.border=NA)
#library(igraph)
library(ggraph)
setwd('~/Dropbox/mres/data/input/collated/')
df = read.csv('plot.csv')
ggraph(df[, c(2, 3)], layout = 'linear', circular = TRUE) +
geom_edge_arc(aes(colour = factor(df[, c(3)])),
edge_width=0.03,
edge_alpha=0.5,
show.legend = FALSE) +
geom_node_text(aes(label = name, angle=node_angle(x, y), hjust = 'clockwise'),
size=0.2,
repel = FALSE) +
theme_graph(background = 'white')
ggraph(df, layout = 'linear', circular = TRUE) +
geom_edge_arc(aes(colour = factor(df[, c(2)])),
edge_width=0.03,
edge_alpha=0.5,
show.legend = FALSE) +
geom_node_text(aes(label = name, angle=node_angle(x, y), hjust = 'clockwise'),
size=0.2,
repel = FALSE) +
theme_graph(background = 'white')
ggsave(filename = "~/Dropbox/mres/paper/diagrams/testing.svg")
name
ggraph.name
get_names(ggraph)
setwd('~/Dropbox/mres/data/input/collated/')
df = read.csv('plot.csv')
ggraph(df, layout = 'linear', circular = TRUE) +
geom_edge_arc(aes(colour = factor(df[, c(2)])),
edge_width=0.03,
edge_alpha=0.5,
show.legend = FALSE) +
geom_node_text(aes(label = name, angle=node_angle(x, y), hjust = 'clockwise'),
size=0.1,
repel = FALSE) +
theme_graph(background = 'white')
ggsave(filename = "~/Dropbox/mres/paper/diagrams/testing.svg")
View(df)
